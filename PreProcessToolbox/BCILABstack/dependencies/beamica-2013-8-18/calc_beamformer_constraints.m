function [LF_penalties,LF_initfilters,LF_chanmask,LF_centroids_grid,LF_costfunction,sa] = calc_beamformer_constraints(LF_chans,LF_anchors,LF_cov,LF_ref)
% Calculate Beamformer constraints for ICA/dictionary learning.
%
% In:
%   ChannelLabels : cell array of 10-20 labels
%
%   AnchorLabels : labels of anchor locations
%
%   CovarianceMatrix : data covariance matrix
%
%   ReferencingMatrix : matrix used for re-referencing (default: common average)
%
% Out:
%   SquarePenalties : cell array of square penalty matrices (one per anchor label)
%                     are ready for use with beamica.m, among others
%
%   InitialFilters : initial matrix of filters (radial to cortex)
%
%   ChannelMask : mask of retained channels (those in headmodel)
%
%   AnchorLocations : matrix of selected anchor locations (#anchors x 3)
%
%   CostFunction : cost function that returns the function value and gradient
%                  for a given unmixing matrix (assuming sphered data)
%
%   HeadModel : head model struct (can be used for further processing)
%
% Notes:
%   Requires Guido Nolte's sourceanalysis toolbox.
%
%                                Christian Kothe, Swartz Center for Computational Neuroscience, UCSD
%                                2010-04-17

% lookup table of anatomical region centroids (generated by MoBIlab)
% warning: these are not necessarily coregistered particularly well with the head model
LF_centroidmap = struct('Precentral_L', {[4.23108288452151 0.305597157992957 5.12657838054604]}, ...
    'Precentral_R', {[-4.20528020132841 0.673804036332546 5.12761812250973]}, 'Frontal_Sup_L', ...
    {[2.08858531558692 -3.88674676095795 4.19641636320092]}, 'Frontal_Sup_R', {[-2.21802251856876 ...
    -3.42197526707012 4.23797390857122]}, 'Frontal_Sup_Orb_L', {[1.670197560078 -4.95343367704499 ...
    -1.91436767127854]}, 'Frontal_Sup_Orb_R', {[-1.5439059147638 -4.6981967612907 -2.1290543308561]}, ...
    'Frontal_Mid_L', {[3.44601607706013 -3.40935856243948 3.58258171502308]}, 'Frontal_Mid_R', ...
    {[-3.65848090239564 -3.31735265619251 3.44006208905955]}, 'Frontal_Mid_Orb_L', {[3.27423289629387 ...
    -5.53036266593331 -1.24890075352431]}, 'Frontal_Mid_Orb_R', {[-3.15007344473511 -5.58049284721048 ...
    -1.37598923793298]}, 'Frontal_Inf_Oper_L', {[5.57607765119148 -1.22160092601595 1.87820668235864]}, ...
    'Frontal_Inf_Oper_R', {[-5.12518654546578 -1.51103974148078 2.2835043538629]}, 'Frontal_Inf_Tri_L', ...
    {[5.25720954524236 -2.94214626022688 1.4181372407483]}, 'Frontal_Inf_Tri_R', {[-4.99288004332893 ...
    -2.99128831940483 1.37548200375666]}, 'Frontal_Inf_Orb_L', {[4.30081007236675 -3.41241828575515 ...
    -1.44778170896923]}, 'Frontal_Inf_Orb_R', {[-4.39691838955149 -3.32260997520098 ...
    -1.48797082820651]}, 'Rolandic_Oper_L', {[5.71451252012493 -0.111240598724779 0.557889853517538]}, ...
    'Rolandic_Oper_R', {[-5.25432022222563 0.327809974660407 0.927191197017338]}, 'Supp_Motor_Area_L', ...
    {[0.431698144489469 -0.587840261923926 6.06598813456952]}, 'Supp_Motor_Area_R', ...
    {[-0.552551234546444 -0.344963213444904 6.43604620799783]}, 'Frontal_Sup_Medial_L',{[0.339386309547571 -5.03922302451318 3.05529314773942]}, 'Frontal_Sup_Medial_R', ...
    {[-0.599042403013505 -4.95358548975335 3.3315470608752]}, 'Frontal_Med_Orb_L', {[0.553159296736419 ...
    -5.28242672178415 -0.860062252760082]}, 'Frontal_Med_Orb_R', {[-0.52237222952882 -5.28843478796661 ...
    -0.847506190494953]}, 'Insula_L', {[4.04000316273526 -0.991626367382352 0.182033060791309]}, ...
    'Insula_R', {[-4.20804313472544 -0.599463076265843 0.117060827883777]}, 'Cingulum_Ant_L', ...
    {[0.158998122628773 -3.04191418890571 1.60976310192608]}, 'Cingulum_Ant_R', {[-0.341672612264182 ...
    -3.51016844089611 1.36841411085656]}, 'Cingulum_Mid_L', {[0.323654032129958 1.2701467677249 ...
    4.09982437558004]}, 'Cingulum_Mid_R', {[-0.339759220878602 1.22666761520706 3.80942028260427]}, ...
    'Cingulum_Post_L', {[0.253799762446454 3.80270573043469 2.18616811870665]}, 'Cingulum_Post_R', ...
    {[-0.295905097743932 3.92068635848129 1.80072867801197]}, 'Hippocampus_L', {[2.32787239524304 ...
    1.8149338343237 -1.49492324132927]}, 'Hippocampus_R', {[-2.73086294085504 1.5871874600083 ...
    -1.62667625879869]}, 'ParaHippocampal_L', {[1.61074664502006 1.12367086624508 -2.21356921544053]}, ...
    'ParaHippocampal_R', {[-1.70007755539167 1.0863331955891 -2.2987395682162]}, 'Calcarine_L', ...
    {[0.644743908779623 7.86638680536702 0.41530545769496]}, 'Calcarine_R', {[-1.34655674522778 ...
    7.0622525121614 0.815612927283389]}, 'Cuneus_L', {[0.436174227506558 8.0521105184353 ...
    2.75411253307904]}, 'Cuneus_R', {[-1.13632632141353 7.79039576946586 2.9509700661813]}, ...
    'Lingual_L', {[1.45764022312239 7.19528124396283 -0.983516476949735]}, 'Lingual_R', ...
    {[-1.53027886287718 6.8088926535018 -0.80693847227352]}, 'Occipital_Sup_L', {[1.727720655485 ...
    8.91038621986873 3.1231692916246]}, 'Occipital_Sup_R', {[-2.48782529805265 8.60494144930644 ...
    3.01411154849547]}, 'Occipital_Mid_L', {[3.58539669462852 8.47122369159517 1.54439747300616]}, ...
    'Occipital_Mid_R', {[-3.82169076221469 8.403165188002 1.87962910627168]}, 'Occipital_Inf_L', ...
    {[4.32560067799949 8.05473703169455 -1.03584254747973]}, 'Occipital_Inf_R', {[-4.13915120052877 ...
    8.66732901750285 -0.972759221390047]}, 'Fusiform_L', {[3.03306995106131 3.88244101945737 ...
    -2.63904244654184]}, 'Fusiform_R', {[-3.09453956058322 3.62827635080648 -2.58603675436737]}, ...
    'Postcentral_L', {[4.63010409497207 2.01440498124974 4.80059572115281]}, 'Postcentral_R', ...
    {[-4.3993780915274 2.43209019429645 5.0528328634925]}, 'Parietal_Sup_L', {[2.56479927818908 ...
    6.03806817199842 6.06260183837795]}, 'Parietal_Sup_R', {[-2.61847877039288 6.02781590621746 ...
    6.12049304611679]}, 'Parietal_Inf_L', {[4.51081835603749 4.46688051185214 4.70072181090452]}, ...
    'Parietal_Inf_R', {[-4.54377179301509 4.56986897251545 4.96200488139722]}, 'SupraMarginal_L', ...
    {[5.94198387433377 3.5205327966889 3.16734349409244]}, 'SupraMarginal_R', {[-6.04904888223408 ...
    3.29900208232786 3.36174439727687]}, 'Angular_L', {[4.80369100364743 6.24353421545146 ...
    3.54538534104306]}, 'Angular_R', {[-4.77806501884985 6.11227265248037 3.75232035290023]}, ...
    'Precuneus_L', {[0.563440286763802 5.6826217224422 5.02317758707648]}, 'Precuneus_R', ...
    {[-0.44343372640072 5.62909663459633 4.82196678692494]}, 'Paracentral_Lobule_L', ...
    {[0.540521246467874 2.51820695734066 6.73651427005108]}, 'Paracentral_Lobule_R', ...
    {[-0.309626690701906 3.30773124242547 7.15953489872043]}, 'Temporal_Sup_L', {[5.53356669307572 ...
    1.70437586710982 0.470132860954377]}, 'Temporal_Sup_R', {[-5.88637424887785 2.06929301884502 ...
    0.846201776642597]}, 'Temporal_Pole_Sup_L', {[4.01021113499556 -1.67284654220415 ...
    -2.14466608308187]}, 'Temporal_Pole_Sup_R', {[-4.44289359026018 -1.64435707946637 ...
    -1.85674374989261]}, 'Temporal_Mid_L', {[6.03983234828478 3.621427188918 -0.108595187168253]}, ...
    'Temporal_Mid_R', {[-6.06270905130349 3.8417450483484 -0.0829066147782176]}, 'Temporal_Pole_Mid_L', ...
    {[3.8384686505636 -1.58861587930798 -3.89716162887448]}, 'Temporal_Pole_Mid_R', {[-4.68551379712917 ...
    -1.709265911014 -3.34739979850841]}, 'Temporal_Inf_L', {[5.46129029296911 2.85901736886324 ...
    -2.87284412264196]}, 'Temporal_Inf_R', {[-5.53957465355057 2.91863205101178 -2.77216211203766]}, ...
    'Olfactory_L', {[0.17374500963458 -1.07905767596242 -1.18429284451753]}, 'Olfactory_R', ...
    {[-0.44084981073756 -1.41739466639547 -0.969831087606087]}, 'Rectus_L', {[0.29754183833035 ...
    -3.95988559434341 -2.28624398338371]}, 'Rectus_R', {[-0.511346423329275 -3.57672239270401 ...
    -2.33852965006135]}, 'Amygdala_L', {[2.46903665702496 -0.339323993784056 -1.62164758253021]}, ...
    'Amygdala_R', {[-2.46903665702496 -0.339323993784056 -1.62164758253021]}, 'Caudate_L', ...
    {[0.0323034230426779 -0.959211470373974 0.625028875228461]}, 'Caudate_R', {[-0.0787586435037352 ...
    -1.48085818901111 0.146815044083548]}, 'Thalamus_L', {[0.20276678183809 1.4463228836034 ...
    0.661798544960814]}, 'Thalamus_R', {[-0.260684002425553 1.53329231645962 0.342886396190338]}, ...
    'Heschl_L', {[4.56872759776798 1.61039340422665 0.764584372615752]}, 'Heschl_R', ...
    {[-4.72127249282475 1.59334403525277 1.01890557792087]});

% initialize source analysis toolbox
sa = prepare_sourceanalysis(LF_chans, 'montreal');

% remove missing channels
[dummy,missing_channels] = setdiff(lower(LF_chans),lower(sa.clab_electrodes)); %#ok<ASGLU>
LF_chanmask = true(1,length(LF_chans));
LF_chanmask(missing_channels) = false;
LF_chans = LF_chans(LF_chanmask);
LF_cov = LF_cov(LF_chanmask,LF_chanmask);

if ~exist('LF_ref','var') || isempty(LF_ref) || strcmp(LF_ref,'nasion')
    LF_ref = eye(length(LF_chans));
elseif strcmp(LF_ref,'common_average')
    LF_ref = eye(length(LF_chans)) - ones(length(LF_chans))/length(LF_chans);
elseif ~isnumeric(LF_ref)
    error('Unrecognized format for referencing matrix chosen.');
end

% incorporate referencing matrix
sa.fp.lintrafo = LF_ref;

% find closest vertices in fine (in-cortex) mesh
for c=1:length(LF_anchors)
    LF_centroids(c,:) = LF_centroidmap.(LF_anchors{c});
    [mindiff,bestidx] = min(sqrt(sum(bsxfun(@minus,sa.grid_fine_incortex,LF_centroids(c,:)).^2,2))); %#ok<ASGLU>
    LF_centroids_grid(c,:) = sa.grid_fine_incortex(bestidx,:);
end

% also look up the normal for that location
for c=1:size(LF_centroids,1)
    [mindiff,bestidx] = min(sqrt(sum(bsxfun(@minus,sa.cortex.vc,LF_centroids(c,:)).^2,2))); %#ok<ASGLU>
    LF_normals(c,:) = sa.normals_cortex(bestidx,:);
end

% generate forward projections
for c=1:size(LF_centroids_grid,1)
    vectors = {[1 0 0],[0 1 0],[0 0 1]};
    for ax = 1:length(vectors)
        LF(:,c,ax) = forward_general([LF_centroids_grid(c,:),vectors{ax}], sa.fp); end
    LF_normfield(:,c) = forward_general([LF_centroids_grid(c,:),LF_normals(c,:)], sa.fp);
end

% reformat anchor parameters
for c=1:size(LF,2)
    LF_anchors{c} = squeeze(LF(:,c,:)); end
LF_anchorinit = [];
for c=1:size(LF_normfield,2)
    LF_anchorinit{c} = squeeze(LF_normfield(:,c)); end

LF_sphere = inv(sqrtm(LF_cov));
I = eye(nnz(LF_chanmask));
% pre-calculate the subspace matrices...
for l = 1:length(LF_anchors)
    U = LF_sphere*LF_anchors{l}; %#ok<*MINV>
    % renormalize
    U = bsxfun(@times,U,1./sqrt(sum(U.^2)));
    % create the projection weighting matrix
    LF_penalties{l} = (I - U*inv(U'*U)*U'); %#ok<MINV>
end

% create initial weight matrix (assuming pre-sphered data)
LF_initfilters = [];
for l=1:length(LF_anchorinit)
    LF_initfilters(l,:) = LF_sphere*LF_anchorinit{l}; end
LF_initfilters = LF_initfilters ./ repmat(sqrt(sum(LF_initfilters.^2,2)),1,size(LF_initfilters,2));

% set up cost function
LF_costfunction = @(x)evaluate_cost(x,LF_penalties,size(LF_sphere));

function [f,g] = evaluate_cost(x,LF_penalties,n)
W = reshape(x,[],n);
f = 0;
A = W';
g = zeros(size(A));
for c = 1:length(LF_penalties)
    t = LF_penalties{c} * A(:,c);
    f = f + A(:,c)' * t;
    g(:,c) = 2 * t;
end
g = g';
